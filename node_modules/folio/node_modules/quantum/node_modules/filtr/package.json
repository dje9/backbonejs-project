{
  "author": {
    "name": "Jake Luer",
    "email": "jake@alogicalparadox.com"
  },
  "name": "filtr",
  "description": "Filter javascript arrays using a MongoDB style syntax and is available for node.js and the browser. It was originally written as an internal component for [Seed](https://github.com/qualiancy/seed), but it had no other dependancies and seemed fit for use in the browser.",
  "version": "0.3.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/logicalparadox/filtr.git"
  },
  "main": "./index",
  "scripts": {
    "test": "make test"
  },
  "engines": {
    "node": ">=0.4.8"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": "*",
    "chai": "*",
    "folio": "0.2.x"
  },
  "optionalDependencies": {},
  "readme": "# Filtr [![Build Status](https://secure.travis-ci.org/logicalparadox/filtr.png)](http://travis-ci.org/logicalparadox/filtr)\n\nFilter javascript arrays using a MongoDB style syntax and is available for node.js\nand the browser. It was originally written as an internal component for [Seed](https://github.com/qualiancy/seed),\nbut it had no other dependancies and seemed fit for use in the browser.\n\n## Installation\n\n### Node.js\n\nFiltr is available on npm.\n\n    npm install filtr\n\n### Browser\n\nA browser build is available in the repository's `dist` folder.\nDownload the package and include either the normal or minimized build in your HTML header.\n\n    <script src=\"filtr.js\" type=\"text/javascript\"></script>\n    <script src=\"filtr.min.js\" type=\"text.javascript\"></script>\n\nThe browser build is fully AMD and CommonJS compatible and should work on all browser.\n\n## Features\n\nFiltr is still in early development so expect this list to grow.\n\n##### Expansive Query Language\n\n* Comparators: `$gt`, `$gte`, `$lt`, `$lte`, `$all`, `$exists`, `$mod`, `$eq`, `$ne`, `$in`, `$nin`, `$size`\n* Traversables: `$or`, `$nor`, `$and`\n\n##### Data Helpers\n\n* `filtr.getPathValue` returns the nested value in an object given a string path\n* `filtr.setPathValue` sets the nested value in an object given a string path\n* `filtr.comparators` are available directly for quick value testing\n\n### Usage\n\n```js\nvar query = filtr({ $gt: 15, $lt: 25 })\n  , results = query.test([ 5, 10, 17, 19, 25 ]);\n// results == [ 17, 19 ];\n```\n\n#### Test options provide different output \n\nTesting also supports a number of options passed in as the second argument.\n\n* **spec**: output modifer\n  * _subset_: (default) return an array containing a subset of matched items\n  * _boolean_: return an array of the original length with each item being a boolean when object passed or failed.\n  * _index_: return an array of numbers matching the index of passed object in the original array\n* **type**: input modifier\n  * _set_: (default) assert that the data provided is an array. test each item.\n  * _single_: assert that the data provided is a single item. return boolean.\n\nUsing the `spec` output modifier is an easy way to handle post processing of result sets\nwithout having to match up a subset.\n\n```js\nvar query = filtr({ $gt: 15, $lt: 25 })\n  , results = query.test([ 5, 10, 17, 19, 25 ], { spec: 'boolean' });\n// results == [ false, false, true, true, false ];\n```\n\n#### Using paths for deep matching\n\nFiltr also supports using paths for deep matching within a javascript object. Given the \nfollowing items, and sample queries.\n\n```js\nvar dataComplex = [\n    { a: { b: 100 }\n    , c: 'testC'\n    , d: \n      [ { e: 'world' } ] \n    }\n  , { a: { b: 50 }\n    , c: 'testC'\n    , d: \n      [ { e: 'universe' }\n      , { e: 'galaxy' } ]\n    }\n];\n\nvar query1 = filtr({ 'a.b': { $gt: 75, $lt: 125 } });\n  , query2 = filtr({ 'a.b': { $gt: 25, $lt: 75 }, 'd[0].e': { $eq: 'universe' } });\n\nvar res1 = query1.test(dataComplex)  // result would have the first item\n  , res2 = query1.test(dataComplex); // result would have the second item \n```\n\nA helper is also available that returns the value in a nested object given a string path.\n\n```js\nvar hello = filtr.getPathValue('d[0].e', dataComplex[1]);\n// hello == 'universe'\n```\n\n## Where to Get Help\n\nPlease post issues to [GitHub Issues](https://github.com/logicalparadox/filtr/issues).\n\n## Tests\n\nTests are written in the BDD styles for the [Mocha]() test runner using the\n`should` assertion interface from [Chai](http://chaijs.com). Running tests is simple:\n\n    make test\n\nA browser suite is also available at `test/browser/index.js`. The same test definitions are \nused in both contexts.\n\n### Contributing\n\nInterested in contributing? Fork to get started. Contact [@logicalparadox](http://github.com/logicalparadox) \nif you are interested in being regular contributor.\n\n#### Contibutors \n\n* Jake Luer ([Github: @logicalparadox](http://github.com/logicalparadox)) ([Twitter: @jakeluer](http://twitter.com/jakeluer)) ([Website](http://alogicalparadox.com))\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011-2012 Jake Luer <jake@alogicalparadox.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "_id": "filtr@0.3.0",
  "dist": {
    "shasum": "da78d5bb73a1dcac2d404dec2d94dd363dd41ec8"
  },
  "_from": "filtr@0.3.x"
}
