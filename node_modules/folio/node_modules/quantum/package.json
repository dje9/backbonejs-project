{
  "author": {
    "name": "Jake Luer",
    "email": "jake@qualiancy.com"
  },
  "name": "quantum",
  "description": "> quantum - n. - A discrete quantity of energy proportional in magnitude to the frequency of the radiation it represents.",
  "keywords": [
    "logger",
    "logging",
    "log"
  ],
  "version": "0.3.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/qualiancy/quantum.git"
  },
  "main": "./index",
  "scripts": {
    "test": "make test"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "dependencies": {
    "drip": "0.3.x",
    "filtr": "0.3.x",
    "fsagent": "0.2.x",
    "oath": "0.2.x",
    "sherlock": "0.1.x"
  },
  "devDependencies": {
    "mocha": "*",
    "chai": "*",
    "chai-spies": "*"
  },
  "readme": "# Quantum\n\n> quantum - n. - A discrete quantity of energy proportional in magnitude to the frequency of the radiation it represents.\n\n## Installation\n\nQuantum is available through [npm](http://npmjs.org).\n\n      npm install quantum\n\n## Getting Started\n\n### API\n\nTo get started using Quantum in your application, creata a new logger and tag it with a namespace. Before\nlogging anything you will need to select the log levels to be bound to your log instance, and indicate\nany number of transports you wish you use. Here are a few examples.\n\n```js\nvar quantum = require('quantum')\n  , log = quantum('my-app');\n\n// Basic console logging.\n\nlog\n .levels('syslog')\n .use(quantum.console({ theme: 'default' })\n .start();\n\n// Environment based configuration.\n\nlog.configure('development', function () {\n  log\n    .use(quantum.console())\n    .use(quantum.writeFile(__dirname + '/dev-logs'));\n});\n\nlog.configure('production', function () {\n  var logopts = { exclude: [ 'debug' ] };\n  log\n    .use(quantum.writeFile(__dirname + '/prod-logs', logopts))\n    .use(quantum.broadcast('ws://logger.my-app.com', logopts));\n});\n\nlog.start();\n\n// Log something!\n\nlog.write('info', 'You really should know about this', { foo: 'bar' });\nlog.info('You really should know about this.', { foo: 'bar' });\n```\n\n### CLI Utility\n\nThe `quantum` command (when installed globally) allows for observation of ongoing logging activites. \nUse it to monitor currenting currning services or `tail` like behavior for JSON formatted log files.\n\n    Quantum\n    https://github.com/qualiancy/quantum\n\n    quantum --help\n       Show CLI help contents\n\n    quantum --version\n       Show the current version\n\n    quantum watch service <options>\n       Observe all log events on a quantum collection service\n         -p, --port [8080] The port the collector is running on.\n         -h, --host [localhost] The host the service is running on.\n         -t, --theme [default] Console theme to display log events on. Use `none` to disable.\n         -f, --file Save incoming log events to this file in JSON format.\n\n    quantum watch file <options>\n       Observe all log events on a quantum based json log file.\n         -l, --levels [syslog] Levels used in the file. Ignored if theme is `json`\n         -t, --theme [default] Console theme to display log events on.\n         -f, --file Listen for log events on this file. Expected JSON format.\n\n    quantum collect <options>\n       Starts a Quantum collection service.\n         -l, --levels [syslog] Levels to use. Recommended log nodes use the same.\n         -p, --port [8080] The port the collector will listen on.\n         -t, --theme [default] Console theme to display log events on. Use `none` to disable.\n         -f, --file Save incoming log events to this file in JSON format.\n\n## Components\n\n### Levels\n\nLevels are defined by a string to numerical reference. Each level should also have a color associated\nwith it for use with a reporter that supports colorful output.\n\n- Syslog (default)\n- CLI\n- HTTP\n- CRUD\n\nBy using levels, a number of helper methods are mounted ont\n\n### Transports\n\nTransports are used to change where the logs are written.\n\n##### Console\n\nConsole logging provides a number of themes to stylize the output.\n\n```js\nvar quantum = require('quantum')\n  , log = new quantum.Logger('my-app');\n\nlog.use(quantum.console({ theme: 'default' });\nlog.start();\n\nlog.info('Hello Universe');\n```\n\n![Quantum Console Themes](http://f.cl.ly/items/22230e0G0p0p1C0X4631/tea_themes.png)\n\n##### File\n\nFile logging will stream log data to file in line-delimeted JSON format. \n\n```js\nvar log = new quantum.Logger('my-app');\n\nlog.use(quantum.writeFile(__dirname + '/logs'));\nlog.start();\n\nlog.info('Hello Universe');\n```\n\n##### Broadcast\n\nBroadcast logging will broadcast events through websockets. Quantum also comes\nwith with a service so you can create my application that all broadcast to a \nsingle log collection service. More information below.\n\n```js\nvar log = new quantum.Logger('my-app');\n\nlog.use(quantum.broadcast('ws://localhost:5000'));\nlog.start();\n\nlog.info('Hello Universe');\n```\n\n##### Multiple transports\n\n### Service\n\nThe Quantum collection service is for use with the broadcast transport. The service\nwill proxy incoming log events to a new Quantum logger. This will allow for multiple\nlogger collection by a single service.\n\nThe following example will proxy all incoming broadcasted log events to the \nfile transport. \n\n```js\nvar log = nwe quantum.Logger('quantum-collector');\n\nlog.use(quantum.writeFile(__dirname + '/logs'));\nlog.init();\n\nvar service = quantum.createService(log);\nservice.listen(5000, function (err) {\n  if (err) throw err;\n  log.info('Quantum collecting on port 5000');\n});\n```\n\n## Tests\n\nTests are writting in [Mocha](http://github.com/visionmedia/mocha) using \nthe [Chai](http://chaijs.com) `should` BDD assertion library. Make sure you \nhave that installed, clone this repo, install dependacies using `npm install`.\n\n    $ make test\n\n## Contributors\n\nInterested in contributing? Fork to get started. Contact [@logicalparadox](http://github.com/logicalparadox) \nif you are interested in being regular contributor.\n\n* Jake Luer ([Github: @logicalparadox](http://github.com/logicalparadox)) ([Twitter: @jakeluer](http://twitter.com/jakeluer)) ([Website](http://alogicalparadox.com))\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 Jake Luer <jake@qualiancy.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "_id": "quantum@0.3.1",
  "dist": {
    "shasum": "1c8a8b00d3d4d776a77fc1b1498bc786dd5c26c3"
  },
  "_from": "quantum@0.3.x"
}
